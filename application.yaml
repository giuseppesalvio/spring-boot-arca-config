eureka:
  client:
    service-url:
      default-zone: http://localhost:8761/eureka
    healthcheck:
      enabled: true
    registry-fetch-interval-seconds: 5
  instance:
    lease-renewal-interval-in-seconds: 10 # Indicates the frequency the client sends heartbeats to server to indicate that it is still alive. Itâ€™s not advisable to change this value since self-preservation assumes that heartbeats are always received at intervals of 30 seconds.
    lease-expiration-duration-in-seconds: 20 # Indicates the duration the server waits since it received the last heartbeat before it can evict an instance from its registry. This value should be greater than lease-renewal-interval-in-seconds. Setting this value too long impacts the precision of actual heartbeats per minute calculation described in the next section, since the liveliness of the registry is dependent on this value. Setting this value too small could make the system intolerable to temporary network glitches.
  server:
    enable-self-preservation: true
    renewal-percent-threshold: 0.85 # This value is used to calculate the expected heartbeats per minute.
    eviction-interval-timer-in-ms: 5000 # A scheduler is run at this frequency which will evict instances from the registry if the lease of the instances are expired as configured by lease-expiration-duration-in-seconds. Setting this value too long will delay the system entering into self-preservation mode.
    renewal-threshold-update-interval-ms: 60000 # A scheduler is run at this frequency which calculates the expected heartbeats per minute.

ribbon:
  eureka:
    enabled: true
  retryableStatusCodes: 404,502,504
  MaxAutoRetries: 1 # Max number of retries on the same server (excluding the first try)
  MaxAutoRetriesNextServer: 2 # Max number of next servers to retry (excluding the first server)
  OkToRetryOnAllOperations: true # Whether all operations can be retried for this client
  ConnectTimeout: 5000 # Connect timeout used by Apache HttpClient
  ReadTimeout: 10000 # Read timeout used by Apache HttpClient
  ServerListRefreshInterval: 2000 # Interval to refresh the server list from the source
  NFLoadBalancerPingInterval: 2000

  #  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule # com.netflix.loadbalancer.RandomRule

management:
  endpoints:
    enabled-by-default: true
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true

spring:
  devtools:
    restart:
      enabled: true
  session:
    store-type: jdbc
    datasource:
      url: jdbc:h2:~/sessiondb;AUTO_SERVER=TRUE;Mode=Oracle
      platform: h2
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
  sleuth:
    sampler:
      probability: 1.0
  zipkin:
    enabled: true
    discovery-client-enabled: true
    base-url: http://zipkin/
  cloud:
    loadbalancer:
      retry:
        enabled: true

#  server.servlet.session.timeout= # Session timeout. If a duration suffix is not specified, seconds will be used.
#  spring.session.jdbc.initialize-schema=embedded # Database schema initialization mode.
#  spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.
#  spring.session.jdbc.table-name=SPRING_SESSION # Name of the database table used to store sessions.
